Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
Portable
Servlets are written in the Java programming language and follow a standard API. Servlets are supported directly or by a plugin on virtually every major Web server. Consequently, servlets written for, say, Macromedia JRun can run virtually unchanged on
Apache Tomcat, Microsoft Internet Information Server (with a separate plugin), IBM
WebSphere, iPlanet Enterprise Server, Oracle9i AS, or StarNine WebStar. They are
part of the Java 2 Platform, Enterprise Edition (J2EE; see http://java.sun.com/j2ee/),
so industry support for servlets is becoming even more pervasive.
Inexpensive
A number of free or very inexpensive Web servers are good for development use or
deployment of low- or medium-volume Web sites. Thus, with servlets and JSP you can
start with a free or inexpensive server and migrate to more expensive servers with
high-performance capabilities or advanced administration utilities only after your
project meets initial success. This is in contrast to many of the other CGI alternatives,
which require a significant initial investment for the purchase of a proprietary package.
Price and portability are somewhat connected. For example, Marty tries to keep
track of the countries of readers that send him questions by email. India was near the
top of the list, probably #2 behind the U.S. Marty also taught one of his JSP and servlet training courses (see http://courses.coreservlets.com/) in Manila, and there was
great interest in servlet and JSP technology there.
Now, why are India and the Philippines both so interested? We surmise that the
answer is twofold. First, both countries have large pools of well-educated software
developers. Second, both countries have (or had, at that time) highly unfavorable
currency exchange rates against the U.S. dollar. So, buying a special-purpose Web
server from a U.S. company consumed a large part of early project funds.
But, with servlets and JSP, they could start with a free server: Apache Tomcat
(either standalone, embedded in the regular Apache Web server, or embedded in
Microsoft IIS). Once the project starts to become successful, they could move to a
server like Caucho Resin that had higher performance and easier administration but
that is not free. But none of their servlets or JSP pages have to be rewritten. If their
project becomes even larger, they might want to move to a distributed (clustered)
environment. No problem: they could move to Macromedia JRun Professional,
which supports distributed applications (Web farms). Again, none of their servlets or
JSP pages have to be rewritten. If the project becomes quite large and complex, they
might want to use Enterprise JavaBeans (EJB) to encapsulate their business logic.
So, they might switch to BEA WebLogic or Oracle9i AS. Again, none of their servlets
or JSP pages have to be rewritten. Finally, if their project becomes even bigger, they
might move it off of their Linux box and onto an IBM mainframe running IBM WebSphere. But once again, none of their servlets or JSP pages have to be rewritten.
Secure
One of the main sources of vulnerabilities in traditional CGI stems from the fact that
the programs are often executed by general-purpose operating system shells. So, the
CGI programmer must be careful to filter out characters such as backquotes and
semicolons that are treated specially by the shell. Implementing this precaution is
harder than one might think, and weaknesses stemming from this problem are constantly being uncovered in widely used CGI libraries.
A second source of problems is the fact that some CGI programs are processed by
languages that do not automatically check array or string bounds. For example, in C
and C++ it is perfectly legal to allocate a 100-element array and then write into the
999th “element,” which is really some random part of program memory. So, programmers who forget to perform this check open up their system to deliberate or
accidental buffer overflow attacks.
Servlets suffer from neither of these problems. Even if a servlet executes a system call (e.g., with Runtime.exec or JNI) to invoke a program on the local operating system, it does not use a shell to do so. And, of course, array bounds checking
and other memory protection features are a central part of the Java programming
language.
Mainstream
There are a lot of good technologies out there. But if vendors don’t support them and
developers don’t know how to use them, what good are they? Servlet and JSP technology is supported by servers from Apache, Oracle, IBM, Sybase, BEA, Macromedia, Caucho, Sun/iPlanet, New Atlanta, ATG, Fujitsu, Lutris, Silverstream, the World
Wide Web Consortium (W3C), and many others. Several low-cost plugins add support to Microsoft IIS and Zeus as well. They run on Windows, Unix/Linux, MacOS,
VMS, and IBM mainframe operating systems. They are the single most popular
application of the Java programming language. They are arguably the most popular
choice for developing medium to large Web applications. They are used by the airline industry (most United Airlines and Delta Airlines Web sites), e-commerce
(ofoto.com), online banking (First USA Bank, Banco Popular de Puerto Rico), Web
search engines/portals (excite.com), large financial sites (American Century Investments), and hundreds of other sites that you visit every day.
Of course, popularity alone is no proof of good technology. Numerous
counter-examples abound. But our point is that you are not experimenting with a
new and unproven technology when you work with server-side Java.
A somewhat oversimplified view of servlets is that they are Java programs with
HTML embedded inside of them. A somewhat oversimplified view of JSP documents is that they are HTML pages with Java code embedded inside of them.
For example, compare the sample servlet shown earlier (Listing 1.1) with the JSP
page shown below (Listing 1.2). They look totally different; the first looks mostly like
a regular Java class, whereas the second looks mostly like a normal HTML page. The
interesting thing is that, despite the huge apparent difference, behind the scenes
they are the same. In fact, a JSP document is just another way of writing a servlet.
JSP pages get translated into servlets, the servlets get compiled, and it is the servlets
that run at request time.
So, the question is, If JSP technology and servlet technology are essentially equivalent in power, does it matter which you use? The answer is, Yes, yes, yes! The issue
is not power, but convenience, ease of use, and maintainability. For example, anything you can do in the Java programming language you could do in assembly language. Does this mean that it does not matter which you use? Hardly.
JSP is discussed in great detail starting in Chapter 10. But, it is worthwhile mentioning now how servlets and JSP fit together. JSP is focused on simplifying the creation and maintenance of the HTML. Servlets are best at invoking the business logic
and performing complicated operations. A quick rule of thumb is that servlets are
best for tasks oriented toward processing, whereas JSP is best for tasks oriented
toward presentation. For some requests, servlets are the right choice. For other
requests, JSP is a better option. For still others, neither servlets alone nor JSP alone
is best, and a combination of the two (see Chapter 15, “Integrating Servlets and JSP:
The Model View Controller (MVC) Architecture”) is best. But the point is that you
need both servlets and JSP in your overall project: almost no project will consist
entirely of servlets or entirely of JSP. You want both.
OK, enough talk. Move on to the next chapter and get started!
